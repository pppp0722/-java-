package test044;
// ICT 인턴쉽 코딩테스트 3번 문제
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Test44 {
	public static void main(String[] args) {
		List<String> al = new ArrayList<>();
		al.add("........#....#..#..#....#...#..#.#.#.#.#.#..#.....");
		al.add("..#..#..#.#....#..#.....#......#..##...........##.");
		al.add(".........#.###.##...#.....##......###............#");
		al.add("....##........#..#.#.#......#...#.##.......##.....");
		al.add(".................###...#.#...#......#.#.#.#.#...#.");
		al.add(".........#.....#...........##....#.#.#.##.....##..");
		al.add(".....#.##............#....#......#..#..#...##.....");
		al.add(".#.......###....#.#..##.##.#...##...#........#...#");
		al.add("..#.##..##..........#..........##.....##..........");
		al.add("#.#..##......#.#.#..##.###...#.........###..#...#.");
		al.add(".#..#..............#...#........#..#...#....#..#..");
		al.add("##..#..#........#....#........#...#.#......#.....#");
		al.add("#.#.......#.#..#...###..#..#.##...#.##.......#...#");
		al.add("#.#...#...#.....#....#......##.#.#.........#....#.");
		al.add(".#..........#......##..#....#....#.#.#..#..###....");
		al.add("#.#............#.##..#.##.##......###......#..#..#");
		al.add(".#..#.##...#.#......................#........#....");
		al.add(".....#....#.#..........##.#.#................#....");
		al.add("##............#.#......####...#.........#..##..#..");
		al.add("....#..##..##...#.........##..##....#..#.##...#...");
		al.add(".#........#...#..#...........#.###.....##.....##..");
		al.add(".......#..#..##...#..###.....#..##.........#......");
		al.add("...#......#..#...........###...............#......");
		al.add("...##.###.#.#....#...#..#.#.#....#....#.##.#...#..");
		al.add("..........#.......#..#..#...###....##.....#..#....");
		al.add(".............##.##.#.......#.#....#.......#..#..#.");
		al.add(".......#........#.....#....##...#...#.#...#.#.##..");
		al.add(".....#..#..#........#..#.....#...#.##.#....#...#..");
		al.add("....................#.#...#....###...###...##...#.");
		al.add("##.#.....##.....#..#.#.#...........#.#.##...#..#.#");
		al.add("#...........#....#.##...#.#.....#...#.....#.#.....");
		al.add("..#..##...#........#.##..#.....##.......#...#.#.#.");
		al.add("......#....#...##...........#..#.......#.##.......");
		al.add("......#..#..#.###..........#...#...........#..#...");
		al.add("....#.#..#..#.#.#...#.......#...#.##......#.......");
		al.add("....#.......#..#........#...#.#...#......#.......#");
		al.add(".#....##...#.#..#....#.#.##........#..#.#.........");
		al.add("#....#.......#..##......##...............#..#.##..");
		al.add("...#..##.......#.....#....#...#.#......#..##..###.");
		al.add(".....#...#...#...#...#...#..##...#..#.............");
		al.add("....##......#...#..#...#...#.#....#.....#..#.##...");
		al.add("...##.......#..##.....#........#.#....#...#.......");
		al.add("..#...#....#...#.###......#................#......");
		al.add("...#...###...#..##...###.....................#....");
		al.add(".....#....#....#...#.#.#.##....##......#....##....");
		al.add("...#.###...##.........#..........#.##.#.....#.....");
		al.add("##..#...#.........#.......#......##...........####");
		al.add("...###.#..........#.....#####........#..#.#.#...#.");
		al.add("...#..#.....#..##.##.#.....##...#...#.#.....#...##");
		al.add(".##.......#.##....#............#..................");
		al.add("#.....#.........#.#.........#..###....##...##.....");
		al.add("#....#.....#...#.....#.##...##...####........#....");
		al.add("#...........#..#...#........#.##..##..#...#.#.....");
		al.add("..#.#................#......###..##.#.#...##...#..");
		al.add(".#.#....#..#............#....#......#............#");
		al.add("..#..#...#.#.#...#...........#.......##.#...#.#...");
		al.add("#..........#.....#.....#......#.......#.#...##....");
		al.add(".......#...........#...........#....#............#");
		al.add("...####.#.....#.##.....#.......##.#..#......#.....");
		al.add(".#..#.....#..#......#.............#.#.#..##...#...");
		al.add("..#.#.#.........#...#..#.......#................##");
		al.add(".#..##.#.#...#.............#..#..........#..#...#.");
		al.add("....#........#......#...###..#.#..................");
		al.add("#..#..#.....#.#.#...##....##........#........#....");
		al.add(".....#.#.......##.......#.....#........#..##..#...");
		al.add("#.#.##........#..##.#..#.#...#........#.#......#..");
		al.add("....#.#.#.......#.##.##...##...#..#.###...#.#.#...");
		al.add(".....##.#....#........#....#.#........#.#.#.....#.");
		al.add(".....#..##..#.#....#.......#...#.#.###.........#.#");
		al.add("#.....#.##..#.......###.........#..##..#......##..");

		System.out.println(reachTheEnd(al, 2244));
	}
	
	public static String reachTheEnd(List<String> grid, int maxTime) {
		// 미로 maze와 vertex 모두 초기화 길 -> 0, 벽 -> 1
		int[][] maze = new int[grid.size()][grid.get(0).length()];
		int n = maze.length;
		int m = maze[0].length;
        Vertex[][] vertex=new Vertex[n][m];
        for(int i=0; i<n; i++){
            String str = grid.get(i);
            for(int j=0; j<m; j++) {
            	maze[i][j] = str.charAt(j) == '.' ? 0 : 1;
            	vertex[i][j] = new Vertex();
            	vertex[i][j].distance = n*m;
            	vertex[i][j].x = i;
            	vertex[i][j].y = j;
            }
        }
        
        // BFS 탐색을 통하여 최소 거리 찾기
        Queue<Vertex> queue = new LinkedList<>();
        vertex[0][0].distance = 0;
        queue.add(vertex[0][0]);
        while(queue.peek() != null) {
        	// 방문이 모두 끝나면 break
        	if(queue.peek() == null) break;
        	// 방문한 노드는 패스하고 처음 방문하는 노드 체크
        	if(queue.peek().visited) {
        		queue.poll();
        		continue;
        	}else queue.peek().visited = true;
        	
        	int cur_x = queue.peek().x;
        	int cur_y = queue.peek().y;
        	// 하, 우, 상, 좌 순서로 길 있으면 거리 비교하고 거리 더 가까우면 교체
        	if(cur_x < n-1 && maze[cur_x+1][cur_y] == 0) {
        		if(vertex[cur_x+1][cur_y].distance > queue.peek().distance+1) vertex[cur_x+1][cur_y].distance = queue.peek().distance+1;
        		queue.add(vertex[cur_x+1][cur_y]);
        	}
        	if(cur_y < m-1 && maze[cur_x][cur_y+1] == 0) {
        		if(vertex[cur_x][cur_y+1].distance > queue.peek().distance+1) vertex[cur_x][cur_y+1].distance = queue.peek().distance+1;
        		queue.add(vertex[cur_x][cur_y+1]);
        	}
        	if(cur_x > 0 && maze[cur_x-1][cur_y] == 0) {
        		if(vertex[cur_x-1][cur_y].distance > queue.peek().distance+1) vertex[cur_x-1][cur_y].distance = queue.peek().distance+1;
        		queue.add(vertex[cur_x-1][cur_y]);
        	}
        	if(cur_y > 0 && maze[cur_x][cur_y-1] == 0) {
        		if(vertex[cur_x][cur_y-1].distance > queue.peek().distance+1) vertex[cur_x][cur_y-1].distance = queue.peek().distance+1;
        		queue.add(vertex[cur_x][cur_y-1]);
        	}
        }
        
        return vertex[n-1][m-1].distance <= maxTime ? "Yes" : "No";
    }
}

class Vertex{
	int x = -1;
	int y = -1;
	int distance = -1;
	boolean visited = false;
}






































